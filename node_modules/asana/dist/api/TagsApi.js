"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagsApi = void 0;
var _ApiClient = require("../ApiClient");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
var Collection = require('../utils/collection');

/**
* Tags service.
* @module api/TagsApi
* @version 3.0.1
*/
var TagsApi = exports.TagsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new TagsApi. 
  * @alias module:api/TagsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instanc
  e} if unspecified.
  */
  function TagsApi(apiClient) {
    _classCallCheck(this, TagsApi);
    this.apiClient = apiClient || _ApiClient.ApiClient.instance;
  }

  /**
   * Create a tag
   * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
   * @param {module:model/Object} body The tag to create.
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
   */
  _createClass(TagsApi, [{
    key: "createTagWithHttpInfo",
    value: function createTagWithHttpInfo(body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTag");
      }
      var pathParams = {};
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/tags',
          'httpMethod': 'POST',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Create a tag
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     * @param {<&vendorExtensions.x-jsdoc-type>} body The tag to create.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponseData}
     */
  }, {
    key: "createTag",
    value: function createTag(body, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.createTagWithHttpInfo(body, opts);
      } else {
        return this.createTagWithHttpInfo(body, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Create a tag in a workspace
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     * @param {module:model/Object} body The tag to create.
     * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "createTagForWorkspaceWithHttpInfo",
    value: function createTagForWorkspaceWithHttpInfo(body, workspace_gid, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTagForWorkspace");
      }
      // verify the required parameter 'workspace_gid' is set
      if (workspace_gid === undefined || workspace_gid === null) {
        throw new Error("Missing the required parameter 'workspace_gid' when calling createTagForWorkspace");
      }
      var pathParams = {
        'workspace_gid': workspace_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/workspaces/{workspace_gid}/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/workspaces/{workspace_gid}/tags',
          'httpMethod': 'POST',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/workspaces/{workspace_gid}/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Create a tag in a workspace
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     * @param {<&vendorExtensions.x-jsdoc-type>} body The tag to create.
     * @param {<&vendorExtensions.x-jsdoc-type>} workspace_gid Globally unique identifier for the workspace or organization.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponseData}
     */
  }, {
    key: "createTagForWorkspace",
    value: function createTagForWorkspace(body, workspace_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.createTagForWorkspaceWithHttpInfo(body, workspace_gid, opts);
      } else {
        return this.createTagForWorkspaceWithHttpInfo(body, workspace_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Delete a tag
     * A specific, existing tag can be deleted by making a DELETE request on the URL for that tag.  Returns an empty data record.
     * @param {String} tag_gid Globally unique identifier for the tag.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "deleteTagWithHttpInfo",
    value: function deleteTagWithHttpInfo(tag_gid) {
      var postBody = null;
      // verify the required parameter 'tag_gid' is set
      if (tag_gid === undefined || tag_gid === null) {
        throw new Error("Missing the required parameter 'tag_gid' when calling deleteTag");
      }
      var pathParams = {
        'tag_gid': tag_gid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/tags/{tag_gid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/tags/{tag_gid}',
          'httpMethod': 'DELETE',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/tags/{tag_gid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Delete a tag
     * A specific, existing tag can be deleted by making a DELETE request on the URL for that tag.  Returns an empty data record.
     * @param {<&vendorExtensions.x-jsdoc-type>} tag_gid Globally unique identifier for the tag.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmptyResponseData}
     */
  }, {
    key: "deleteTag",
    value: function deleteTag(tag_gid) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.deleteTagWithHttpInfo(tag_gid);
      } else {
        return this.deleteTagWithHttpInfo(tag_gid).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get a tag
     * Returns the complete tag record for a single tag.
     * @param {String} tag_gid Globally unique identifier for the tag.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getTagWithHttpInfo",
    value: function getTagWithHttpInfo(tag_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'tag_gid' is set
      if (tag_gid === undefined || tag_gid === null) {
        throw new Error("Missing the required parameter 'tag_gid' when calling getTag");
      }
      var pathParams = {
        'tag_gid': tag_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/tags/{tag_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/tags/{tag_gid}',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/tags/{tag_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get a tag
     * Returns the complete tag record for a single tag.
     * @param {<&vendorExtensions.x-jsdoc-type>} tag_gid Globally unique identifier for the tag.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponseData}
     */
  }, {
    key: "getTag",
    value: function getTag(tag_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.getTagWithHttpInfo(tag_gid, opts);
      } else {
        return this.getTagWithHttpInfo(tag_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get multiple tags
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {String} opts.workspace The workspace to filter tags on.
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getTagsWithHttpInfo",
    value: function getTagsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return Collection.fromApiClient(this.apiClient.callApi('/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/tags',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get multiple tags
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {String} opts.workspace The workspace to filter tags on.
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponseArray}
     */
  }, {
    key: "getTags",
    value: function getTags(opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return this.getTagsWithHttpInfo(opts);
      } else {
        return this.getTagsWithHttpInfo(opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get a task&#x27;s tags
     * Get a compact representation of all of the tags the task has.
     * @param {String} task_gid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getTagsForTaskWithHttpInfo",
    value: function getTagsForTaskWithHttpInfo(task_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'task_gid' is set
      if (task_gid === undefined || task_gid === null) {
        throw new Error("Missing the required parameter 'task_gid' when calling getTagsForTask");
      }
      var pathParams = {
        'task_gid': task_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return Collection.fromApiClient(this.apiClient.callApi('/tasks/{task_gid}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/tasks/{task_gid}/tags',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/tasks/{task_gid}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get a task&#x27;s tags
     * Get a compact representation of all of the tags the task has.
     * @param {<&vendorExtensions.x-jsdoc-type>} task_gid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponseArray}
     */
  }, {
    key: "getTagsForTask",
    value: function getTagsForTask(task_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return this.getTagsForTaskWithHttpInfo(task_gid, opts);
      } else {
        return this.getTagsForTaskWithHttpInfo(task_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get tags in a workspace
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     * @param {String} workspace_gid Globally unique identifier for the workspace or organization.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getTagsForWorkspaceWithHttpInfo",
    value: function getTagsForWorkspaceWithHttpInfo(workspace_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'workspace_gid' is set
      if (workspace_gid === undefined || workspace_gid === null) {
        throw new Error("Missing the required parameter 'workspace_gid' when calling getTagsForWorkspace");
      }
      var pathParams = {
        'workspace_gid': workspace_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return Collection.fromApiClient(this.apiClient.callApi('/workspaces/{workspace_gid}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/workspaces/{workspace_gid}/tags',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/workspaces/{workspace_gid}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get tags in a workspace
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     * @param {<&vendorExtensions.x-jsdoc-type>} workspace_gid Globally unique identifier for the workspace or organization.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponseArray}
     */
  }, {
    key: "getTagsForWorkspace",
    value: function getTagsForWorkspace(workspace_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return this.getTagsForWorkspaceWithHttpInfo(workspace_gid, opts);
      } else {
        return this.getTagsForWorkspaceWithHttpInfo(workspace_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Update a tag
     * Updates the properties of a tag. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the tag.  Returns the complete updated tag record.
     * @param {String} tag_gid Globally unique identifier for the tag.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "updateTagWithHttpInfo",
    value: function updateTagWithHttpInfo(tag_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'tag_gid' is set
      if (tag_gid === undefined || tag_gid === null) {
        throw new Error("Missing the required parameter 'tag_gid' when calling updateTag");
      }
      var pathParams = {
        'tag_gid': tag_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/tags/{tag_gid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/tags/{tag_gid}',
          'httpMethod': 'PUT',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/tags/{tag_gid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Update a tag
     * Updates the properties of a tag. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the tag.  Returns the complete updated tag record.
     * @param {<&vendorExtensions.x-jsdoc-type>} tag_gid Globally unique identifier for the tag.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponseData}
     */
  }, {
    key: "updateTag",
    value: function updateTag(tag_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.updateTagWithHttpInfo(tag_gid, opts);
      } else {
        return this.updateTagWithHttpInfo(tag_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }
  }]);
  return TagsApi;
}();