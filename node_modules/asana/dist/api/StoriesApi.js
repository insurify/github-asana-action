"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StoriesApi = void 0;
var _ApiClient = require("../ApiClient");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
var Collection = require('../utils/collection');

/**
* Stories service.
* @module api/StoriesApi
* @version 3.0.1
*/
var StoriesApi = exports.StoriesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new StoriesApi. 
  * @alias module:api/StoriesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instanc
  e} if unspecified.
  */
  function StoriesApi(apiClient) {
    _classCallCheck(this, StoriesApi);
    this.apiClient = apiClient || _ApiClient.ApiClient.instance;
  }

  /**
   * Create a story on a task
   * Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
   * @param {module:model/Object} body The story to create.
   * @param {String} task_gid The task to operate on.
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
   */
  _createClass(StoriesApi, [{
    key: "createStoryForTaskWithHttpInfo",
    value: function createStoryForTaskWithHttpInfo(body, task_gid, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createStoryForTask");
      }
      // verify the required parameter 'task_gid' is set
      if (task_gid === undefined || task_gid === null) {
        throw new Error("Missing the required parameter 'task_gid' when calling createStoryForTask");
      }
      var pathParams = {
        'task_gid': task_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/tasks/{task_gid}/stories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/tasks/{task_gid}/stories',
          'httpMethod': 'POST',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/tasks/{task_gid}/stories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Create a story on a task
     * Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
     * @param {<&vendorExtensions.x-jsdoc-type>} body The story to create.
     * @param {<&vendorExtensions.x-jsdoc-type>} task_gid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoryResponseData}
     */
  }, {
    key: "createStoryForTask",
    value: function createStoryForTask(body, task_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.createStoryForTaskWithHttpInfo(body, task_gid, opts);
      } else {
        return this.createStoryForTaskWithHttpInfo(body, task_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Delete a story
     * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
     * @param {String} story_gid Globally unique identifier for the story.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "deleteStoryWithHttpInfo",
    value: function deleteStoryWithHttpInfo(story_gid) {
      var postBody = null;
      // verify the required parameter 'story_gid' is set
      if (story_gid === undefined || story_gid === null) {
        throw new Error("Missing the required parameter 'story_gid' when calling deleteStory");
      }
      var pathParams = {
        'story_gid': story_gid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/stories/{story_gid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/stories/{story_gid}',
          'httpMethod': 'DELETE',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/stories/{story_gid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Delete a story
     * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
     * @param {<&vendorExtensions.x-jsdoc-type>} story_gid Globally unique identifier for the story.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmptyResponseData}
     */
  }, {
    key: "deleteStory",
    value: function deleteStory(story_gid) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.deleteStoryWithHttpInfo(story_gid);
      } else {
        return this.deleteStoryWithHttpInfo(story_gid).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get stories from a task
     * Returns the compact records for all stories on the task.
     * @param {String} task_gid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getStoriesForTaskWithHttpInfo",
    value: function getStoriesForTaskWithHttpInfo(task_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'task_gid' is set
      if (task_gid === undefined || task_gid === null) {
        throw new Error("Missing the required parameter 'task_gid' when calling getStoriesForTask");
      }
      var pathParams = {
        'task_gid': task_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return Collection.fromApiClient(this.apiClient.callApi('/tasks/{task_gid}/stories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/tasks/{task_gid}/stories',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/tasks/{task_gid}/stories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get stories from a task
     * Returns the compact records for all stories on the task.
     * @param {<&vendorExtensions.x-jsdoc-type>} task_gid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoryResponseArray}
     */
  }, {
    key: "getStoriesForTask",
    value: function getStoriesForTask(task_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return this.getStoriesForTaskWithHttpInfo(task_gid, opts);
      } else {
        return this.getStoriesForTaskWithHttpInfo(task_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get a story
     * Returns the full record for a single story.
     * @param {String} story_gid Globally unique identifier for the story.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getStoryWithHttpInfo",
    value: function getStoryWithHttpInfo(story_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'story_gid' is set
      if (story_gid === undefined || story_gid === null) {
        throw new Error("Missing the required parameter 'story_gid' when calling getStory");
      }
      var pathParams = {
        'story_gid': story_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/stories/{story_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/stories/{story_gid}',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/stories/{story_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get a story
     * Returns the full record for a single story.
     * @param {<&vendorExtensions.x-jsdoc-type>} story_gid Globally unique identifier for the story.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoryResponseData}
     */
  }, {
    key: "getStory",
    value: function getStory(story_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.getStoryWithHttpInfo(story_gid, opts);
      } else {
        return this.getStoryWithHttpInfo(story_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Update a story
     * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of &#x60;text&#x60; and &#x60;html_text&#x60; can be specified.
     * @param {module:model/Object} body The comment story to update.
     * @param {String} story_gid Globally unique identifier for the story.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "updateStoryWithHttpInfo",
    value: function updateStoryWithHttpInfo(body, story_gid, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateStory");
      }
      // verify the required parameter 'story_gid' is set
      if (story_gid === undefined || story_gid === null) {
        throw new Error("Missing the required parameter 'story_gid' when calling updateStory");
      }
      var pathParams = {
        'story_gid': story_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/stories/{story_gid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/stories/{story_gid}',
          'httpMethod': 'PUT',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/stories/{story_gid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Update a story
     * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of &#x60;text&#x60; and &#x60;html_text&#x60; can be specified.
     * @param {<&vendorExtensions.x-jsdoc-type>} body The comment story to update.
     * @param {<&vendorExtensions.x-jsdoc-type>} story_gid Globally unique identifier for the story.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoryResponseData}
     */
  }, {
    key: "updateStory",
    value: function updateStory(body, story_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.updateStoryWithHttpInfo(body, story_gid, opts);
      } else {
        return this.updateStoryWithHttpInfo(body, story_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }
  }]);
  return StoriesApi;
}();