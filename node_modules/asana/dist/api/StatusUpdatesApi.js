"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatusUpdatesApi = void 0;
var _ApiClient = require("../ApiClient");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
var Collection = require('../utils/collection');

/**
* StatusUpdates service.
* @module api/StatusUpdatesApi
* @version 3.0.1
*/
var StatusUpdatesApi = exports.StatusUpdatesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new StatusUpdatesApi. 
  * @alias module:api/StatusUpdatesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instanc
  e} if unspecified.
  */
  function StatusUpdatesApi(apiClient) {
    _classCallCheck(this, StatusUpdatesApi);
    this.apiClient = apiClient || _ApiClient.ApiClient.instance;
  }

  /**
   * Create a status update
   * Creates a new status update on an object. Returns the full record of the newly created status update.
   * @param {module:model/Object} body The status update to create.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
   * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
   * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
   */
  _createClass(StatusUpdatesApi, [{
    key: "createStatusForObjectWithHttpInfo",
    value: function createStatusForObjectWithHttpInfo(body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createStatusForObject");
      }
      var pathParams = {};
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/status_updates', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/status_updates',
          'httpMethod': 'POST',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/status_updates', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Create a status update
     * Creates a new status update on an object. Returns the full record of the newly created status update.
     * @param {<&vendorExtensions.x-jsdoc-type>} body The status update to create.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatusUpdateResponseData}
     */
  }, {
    key: "createStatusForObject",
    value: function createStatusForObject(body, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.createStatusForObjectWithHttpInfo(body, opts);
      } else {
        return this.createStatusForObjectWithHttpInfo(body, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Delete a status update
     * Deletes a specific, existing status update.  Returns an empty data record.
     * @param {String} status_update_gid The status update to get.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "deleteStatusWithHttpInfo",
    value: function deleteStatusWithHttpInfo(status_update_gid) {
      var postBody = null;
      // verify the required parameter 'status_update_gid' is set
      if (status_update_gid === undefined || status_update_gid === null) {
        throw new Error("Missing the required parameter 'status_update_gid' when calling deleteStatus");
      }
      var pathParams = {
        'status_update_gid': status_update_gid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/status_updates/{status_update_gid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/status_updates/{status_update_gid}',
          'httpMethod': 'DELETE',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/status_updates/{status_update_gid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Delete a status update
     * Deletes a specific, existing status update.  Returns an empty data record.
     * @param {<&vendorExtensions.x-jsdoc-type>} status_update_gid The status update to get.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmptyResponseData}
     */
  }, {
    key: "deleteStatus",
    value: function deleteStatus(status_update_gid) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.deleteStatusWithHttpInfo(status_update_gid);
      } else {
        return this.deleteStatusWithHttpInfo(status_update_gid).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get a status update
     * Returns the complete record for a single status update.
     * @param {String} status_update_gid The status update to get.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getStatusWithHttpInfo",
    value: function getStatusWithHttpInfo(status_update_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'status_update_gid' is set
      if (status_update_gid === undefined || status_update_gid === null) {
        throw new Error("Missing the required parameter 'status_update_gid' when calling getStatus");
      }
      var pathParams = {
        'status_update_gid': status_update_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/status_updates/{status_update_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/status_updates/{status_update_gid}',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/status_updates/{status_update_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get a status update
     * Returns the complete record for a single status update.
     * @param {<&vendorExtensions.x-jsdoc-type>} status_update_gid The status update to get.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatusUpdateResponseData}
     */
  }, {
    key: "getStatus",
    value: function getStatus(status_update_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.getStatusWithHttpInfo(status_update_gid, opts);
      } else {
        return this.getStatusWithHttpInfo(status_update_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get status updates from an object
     * Returns the compact status update records for all updates on the object.
     * @param {String} parent Globally unique identifier for object to fetch statuses from. Must be a GID for a project, portfolio, or goal.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Date} opts.created_since Only return statuses that have been created since the given time.
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getStatusesForObjectWithHttpInfo",
    value: function getStatusesForObjectWithHttpInfo(parent, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling getStatusesForObject");
      }
      var pathParams = {};
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      queryParams['parent'] = parent;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return Collection.fromApiClient(this.apiClient.callApi('/status_updates', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/status_updates',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/status_updates', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get status updates from an object
     * Returns the compact status update records for all updates on the object.
     * @param {<&vendorExtensions.x-jsdoc-type>} parent Globally unique identifier for object to fetch statuses from. Must be a GID for a project, portfolio, or goal.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Date} opts.created_since Only return statuses that have been created since the given time.
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StatusUpdateResponseArray}
     */
  }, {
    key: "getStatusesForObject",
    value: function getStatusesForObject(parent, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && true) {
        return this.getStatusesForObjectWithHttpInfo(parent, opts);
      } else {
        return this.getStatusesForObjectWithHttpInfo(parent, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }
  }]);
  return StatusUpdatesApi;
}();