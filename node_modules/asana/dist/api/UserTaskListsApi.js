"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserTaskListsApi = void 0;
var _ApiClient = require("../ApiClient");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
var Collection = require('../utils/collection');

/**
* UserTaskLists service.
* @module api/UserTaskListsApi
* @version 3.0.1
*/
var UserTaskListsApi = exports.UserTaskListsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new UserTaskListsApi. 
  * @alias module:api/UserTaskListsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instanc
  e} if unspecified.
  */
  function UserTaskListsApi(apiClient) {
    _classCallCheck(this, UserTaskListsApi);
    this.apiClient = apiClient || _ApiClient.ApiClient.instance;
  }

  /**
   * Get a user task list
   * Returns the full record for a user task list.
   * @param {String} user_task_list_gid Globally unique identifier for the user task list.
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
   */
  _createClass(UserTaskListsApi, [{
    key: "getUserTaskListWithHttpInfo",
    value: function getUserTaskListWithHttpInfo(user_task_list_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'user_task_list_gid' is set
      if (user_task_list_gid === undefined || user_task_list_gid === null) {
        throw new Error("Missing the required parameter 'user_task_list_gid' when calling getUserTaskList");
      }
      var pathParams = {
        'user_task_list_gid': user_task_list_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/user_task_lists/{user_task_list_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/user_task_lists/{user_task_list_gid}',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/user_task_lists/{user_task_list_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get a user task list
     * Returns the full record for a user task list.
     * @param {<&vendorExtensions.x-jsdoc-type>} user_task_list_gid Globally unique identifier for the user task list.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserTaskListResponseData}
     */
  }, {
    key: "getUserTaskList",
    value: function getUserTaskList(user_task_list_gid, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.getUserTaskListWithHttpInfo(user_task_list_gid, opts);
      } else {
        return this.getUserTaskListWithHttpInfo(user_task_list_gid, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }

    /**
     * Get a user&#x27;s task list
     * Returns the full record for a user&#x27;s task list.
     * @param {String} user_gid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
     * @param {String} workspace The workspace in which to get the user task list.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getUserTaskListForUserWithHttpInfo",
    value: function getUserTaskListForUserWithHttpInfo(user_gid, workspace, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'user_gid' is set
      if (user_gid === undefined || user_gid === null) {
        throw new Error("Missing the required parameter 'user_gid' when calling getUserTaskListForUser");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getUserTaskListForUser");
      }
      var pathParams = {
        'user_gid': user_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      queryParams['workspace'] = workspace;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';

      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return Collection.fromApiClient(this.apiClient.callApi('/users/{user_gid}/user_task_list', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/users/{user_gid}/user_task_list',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      } else {
        return this.apiClient.callApi('/users/{user_gid}/user_task_list', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
      }
    }

    /**
     * Get a user&#x27;s task list
     * Returns the full record for a user&#x27;s task list.
     * @param {<&vendorExtensions.x-jsdoc-type>} user_gid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
     * @param {<&vendorExtensions.x-jsdoc-type>} workspace The workspace in which to get the user task list.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserTaskListResponseData}
     */
  }, {
    key: "getUserTaskListForUser",
    value: function getUserTaskListForUser(user_gid, workspace, opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION && false) {
        return this.getUserTaskListForUserWithHttpInfo(user_gid, workspace, opts);
      } else {
        return this.getUserTaskListForUserWithHttpInfo(user_gid, workspace, opts).then(function (response_and_data) {
          return response_and_data.data;
        });
      }
    }
  }]);
  return UserTaskListsApi;
}();